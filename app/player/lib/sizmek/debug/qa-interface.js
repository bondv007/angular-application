// Generated by CoffeeScript 1.7.1
(function() {
  var Main,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.com = window.com || {};

  window.com.sizmek = window.com.sizmek || {};

  window.com.sizmek.controller = window.com.sizmek.controller || {};

  window.com.sizmek.event = window.com.sizmek.event || {};

  window.com.sizmek.model = window.com.sizmek.model || {};

  window.com.sizmek.view = window.com.sizmek.view || {};

  com.sizmek.controller.PlayerController = (function() {
    function PlayerController(models, views) {
      var adConfig, adString, data, playerConfig, playerString;
      this.models = models;
      this.views = views;
      adConfig = this.models.adConfigModel.getData();
      playerConfig = this.models.playerConfigModel.getData();
      adString = searchify(adConfig);
      playerString = searchify(playerConfig);
      data = {
        config: playerConfig,
        search: "" + adString + "&" + playerString
      };
      this.views.playerView.render(data);
    }

    return PlayerController;

  })();

  com.sizmek.event.Event = (function() {
    function Event() {}

    Event.MODEL_CHANGED = "modelChanged";

    Event.TITLE_BAR_SELECTED = "titleBarSelected";

    Event.SUBMIT_SELECTED = "submitSelected";

    Event.RESET_SELECTED = "resetSelected";

    Event.PLAYER_LOADED = "playerLoaded";

    return Event;

  })();

  com.sizmek.controller.SectionController = (function() {
    var Event;

    Event = com.sizmek.event.Event;

    SectionController.prototype.view = null;

    SectionController.prototype.views = null;

    SectionController.prototype.models = null;

    function SectionController(view) {
      this.view = view;
      this._initExpandState = __bind(this._initExpandState, this);
      this._onMenuStateModelChanged = __bind(this._onMenuStateModelChanged, this);
      this._onTitleBarSelected = __bind(this._onTitleBarSelected, this);
      this.view.addEventListener(Event.TITLE_BAR_SELECTED, this._onTitleBarSelected);
      this.models.menuStateModel.addEventListener(Event.MODEL_CHANGED, this._onMenuStateModelChanged);
      this._initExpandState();
    }

    SectionController.prototype._onTitleBarSelected = function(event) {
      var key, value;
      key = "" + this.view.id + "-expanded";
      value = !this.models.menuStateModel.getData(key);
      return this.models.menuStateModel.setData(key, value);
    };

    SectionController.prototype._onMenuStateModelChanged = function(event) {
      var expand, id;
      id = event.data.key.replace("-expanded", "");
      expand = event.data.value;
      if (id !== this.view.id) {
        return;
      }
      if (expand) {
        return this.view.expand();
      } else {
        return this.view.collapse();
      }
    };

    SectionController.prototype._initExpandState = function() {
      var expand;
      expand = this.models.menuStateModel.getData("" + this.view.id + "-expanded");
      if (expand) {
        return this.view.expand();
      } else {
        return this.view.collapse();
      }
    };

    return SectionController;

  })();

  com.sizmek.controller.ReportingController = (function(_super) {
    var Event, SectionController;

    __extends(ReportingController, _super);

    SectionController = com.sizmek.controller.SectionController;

    Event = com.sizmek.event.Event;

    function ReportingController(models, views) {
      this.models = models;
      this.views = views;
      this._updateView = __bind(this._updateView, this);
      this._onPlayerLoaded = __bind(this._onPlayerLoaded, this);
      ReportingController.__super__.constructor.call(this, this.views.reportingView);
      this.views.playerView.addEventListener(Event.PLAYER_LOADED, this._onPlayerLoaded);
    }

    ReportingController.prototype._onPlayerLoaded = function() {
      this.model = this.views.playerView.frame.contentWindow.instreamPlayer.models.reportingModel;
      this.model.addEventListener(Event.MODEL_CHANGED, this._updateView);
      return this._updateView();
    };

    ReportingController.prototype._updateView = function() {
      var data;
      data = this.model.getData();
      return this.view.render(data);
    };

    return ReportingController;

  })(com.sizmek.controller.SectionController);

  com.sizmek.controller.PlayerConfigController = (function(_super) {
    var Event, SectionController;

    __extends(PlayerConfigController, _super);

    SectionController = com.sizmek.controller.SectionController;

    Event = com.sizmek.event.Event;

    function PlayerConfigController(models, views) {
      var data;
      this.models = models;
      this.views = views;
      this._onSubmitSelected = __bind(this._onSubmitSelected, this);
      PlayerConfigController.__super__.constructor.call(this, this.views.playerConfigView);
      this.model = this.models.playerConfigModel;
      this.views.submitBtnView.addEventListener(Event.SUBMIT_SELECTED, this._onSubmitSelected);
      data = this.model.getData();
      this.view.render(data);
    }

    PlayerConfigController.prototype._onSubmitSelected = function() {
      this.model.setData("player-type", this.view.typeNode.options[this.view.typeNode.selectedIndex].value);
      this.model.setData("width", this.view.widthNode.value);
      this.model.setData("height", this.view.heightNode.value);
      this.model.setData("controls", this.view.controlsNode.options[this.view.controlsNode.selectedIndex].value);
      this.model.setData("auto-start", this.view.autoStartNode.options[this.view.autoStartNode.selectedIndex].value);
      this.model.setData("script-access", this.view.scriptAccessNode.options[this.view.scriptAccessNode.selectedIndex].value);
      return this.model.setData("wmode", this.view.wmodeNode.options[this.view.wmodeNode.selectedIndex].value);
    };

    return PlayerConfigController;

  })(com.sizmek.controller.SectionController);

  com.sizmek.controller.MenuStateController = (function() {
    var Event;

    Event = com.sizmek.event.Event;

    function MenuStateController(models, views) {
      this.models = models;
      this.views = views;
      this._onResetSelected = __bind(this._onResetSelected, this);
      this.views.resetBtnView.addEventListener(Event.RESET_SELECTED, this._onResetSelected);
    }

    MenuStateController.prototype._onResetSelected = function() {
      return this.models.menuStateModel.reset();
    };

    return MenuStateController;

  })();

  com.sizmek.controller.LocationController = (function() {
    var Event;

    Event = com.sizmek.event.Event;

    function LocationController(models, views) {
      this.models = models;
      this.views = views;
      this._onResetSelected = __bind(this._onResetSelected, this);
      this._onSubmitSelected = __bind(this._onSubmitSelected, this);
      this.views.submitBtnView.addEventListener(Event.SUBMIT_SELECTED, this._onSubmitSelected);
      this.views.resetBtnView.addEventListener(Event.RESET_SELECTED, this._onResetSelected);
    }

    LocationController.prototype._onSubmitSelected = function() {
      var adConfig, adString, playerConfig, playerString;
      adConfig = this.models.adConfigModel.getData();
      playerConfig = this.models.playerConfigModel.getData();
      adString = searchify(adConfig);
      playerString = searchify(playerConfig);
      return window.location.search = "" + adString + "&" + playerString;
    };

    LocationController.prototype._onResetSelected = function() {
      return window.location.search = "";
    };

    return LocationController;

  })();

  com.sizmek.controller.CompanionController = (function() {
    var Event;

    Event = com.sizmek.event.Event;

    function CompanionController(models, views) {
      this.models = models;
      this.views = views;
      this._updateView = __bind(this._updateView, this);
      this._onPlayerLoaded = __bind(this._onPlayerLoaded, this);
      this.view = this.views.companionView;
      this.views.playerView.addEventListener(Event.PLAYER_LOADED, this._onPlayerLoaded);
    }

    CompanionController.prototype._onPlayerLoaded = function() {
      this.model = this.views.playerView.frame.contentWindow.instreamPlayer.models.companionModel;
      return this.model.addEventListener(Event.MODEL_CHANGED, this._updateView);
    };

    CompanionController.prototype._updateView = function() {
      var data;
      data = this.model.getData();
      return this.view.render(data);
    };

    return CompanionController;

  })();

  com.sizmek.controller.AdTagController = (function(_super) {
    var Event, SectionController;

    __extends(AdTagController, _super);

    SectionController = com.sizmek.controller.SectionController;

    Event = com.sizmek.event.Event;

    function AdTagController(models, views) {
      this.models = models;
      this.views = views;
      this._updateView = __bind(this._updateView, this);
      this._onPlayerLoaded = __bind(this._onPlayerLoaded, this);
      AdTagController.__super__.constructor.call(this, this.views.adTagView);
      this.views.playerView.addEventListener(Event.PLAYER_LOADED, this._onPlayerLoaded);
    }

    AdTagController.prototype._onPlayerLoaded = function() {
      this.model = this.views.playerView.frame.contentWindow.instreamPlayer.models.adTagModel;
      return this.model.addEventListener(Event.MODEL_CHANGED, this._updateView);
    };

    AdTagController.prototype._updateView = function() {
      var data;
      data = this.model.getData();
      return this.view.render(data.tag);
    };

    return AdTagController;

  })(com.sizmek.controller.SectionController);

  com.sizmek.controller.AdHistoryController = (function() {
    var Event;

    Event = com.sizmek.event.Event;

    function AdHistoryController(models, views) {
      this.models = models;
      this.views = views;
      this._onResetSelected = __bind(this._onResetSelected, this);
      this._onSubmitSelected = __bind(this._onSubmitSelected, this);
      this.model = this.models.adHistoryModel;
      this.views.submitBtnView.addEventListener(Event.SUBMIT_SELECTED, this._onSubmitSelected);
      this.views.resetBtnView.addEventListener(Event.RESET_SELECTED, this._onResetSelected);
    }

    AdHistoryController.prototype._onSubmitSelected = function() {
      var data, key, value, _i, _len, _results;
      data = this.models.adConfigModel.getData();
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        key = data[_i];
        value = data[key];
        if (value.length > 0) {
          key += "-history";
          _results.push(this.model.setData(key, value));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    AdHistoryController.prototype._onResetSelected = function() {
      return this.model.reset();
    };

    return AdHistoryController;

  })();

  com.sizmek.controller.AdConfigController = (function(_super) {
    var Event, SectionController;

    __extends(AdConfigController, _super);

    SectionController = com.sizmek.controller.SectionController;

    Event = com.sizmek.event.Event;

    function AdConfigController(models, views) {
      this.models = models;
      this.views = views;
      this._onSubmitSelected = __bind(this._onSubmitSelected, this);
      AdConfigController.__super__.constructor.call(this, this.views.adConfigView);
      this.model = this.models.adConfigModel;
      this.views.submitBtnView.addEventListener(Event.SUBMIT_SELECTED, this._onSubmitSelected);
      this.view.render(this.model.getData());
    }

    AdConfigController.prototype._onSubmitSelected = function() {
      this.model.setData("preroll", this.view.preNode.value);
      this.model.setData("midroll", this.view.midNode.value);
      this.model.setData("postroll", this.view.postNode.value);
      return this.model.setData("overlay", this.view.overNode.value);
    };

    return AdConfigController;

  })(com.sizmek.controller.SectionController);

  com.sizmek.controller.ControllerCollection = (function() {
    var AdConfigController, AdHistoryController, AdTagController, CompanionController, LocationController, MenuStateController, PlayerConfigController, PlayerController, ReportingController;

    AdConfigController = com.sizmek.controller.AdConfigController;

    PlayerConfigController = com.sizmek.controller.PlayerConfigController;

    ReportingController = com.sizmek.controller.ReportingController;

    AdTagController = com.sizmek.controller.AdTagController;

    PlayerController = com.sizmek.controller.PlayerController;

    AdHistoryController = com.sizmek.controller.AdHistoryController;

    MenuStateController = com.sizmek.controller.MenuStateController;

    CompanionController = com.sizmek.controller.CompanionController;

    LocationController = com.sizmek.controller.LocationController;

    function ControllerCollection(models, views) {
      this.models = models;
      this.views = views;
      this.adConfigController = new AdConfigController(this.models, this.views);
      this.playerConfigController = new PlayerConfigController(this.models, this.views);
      this.reportingController = new ReportingController(this.models, this.views);
      this.adTagController = new AdTagController(this.models, this.views);
      this.playerController = new PlayerController(this.models, this.views);
      this.adHistoryController = new AdHistoryController(this.models, this.views);
      this.menuStateController = new MenuStateController(this.models, this.views);
      this.companionController = new CompanionController(this.models, this.views);
      this.locationController = new LocationController(this.models, this.views);
    }

    return ControllerCollection;

  })();

  com.sizmek.event.EventDispatcher = (function() {
    function EventDispatcher(listeners) {
      this.listeners = listeners != null ? listeners : [];
      this.dispatchEvent = __bind(this.dispatchEvent, this);
      this.removeEventListener = __bind(this.removeEventListener, this);
      this.addEventListener = __bind(this.addEventListener, this);
    }

    EventDispatcher.prototype.addEventListener = function(type, callback) {
      var listener;
      listener = {
        type: type,
        callback: callback
      };
      return this.listeners.push(listener);
    };

    EventDispatcher.prototype.removeEventListener = function(type, callback) {
      var i, listener, _i, _ref, _results;
      _results = [];
      for (i = _i = _ref = this.listeners.length - 1; _ref <= 0 ? _i < 0 : _i > 0; i = _ref <= 0 ? ++_i : --_i) {
        listener = this.listeners[i];
        if (listener.type === type && listener.callback === callback) {
          _results.push(this.listeners.splice(i, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    EventDispatcher.prototype.dispatchEvent = function(type, data) {
      var event, listener, _i, _len, _ref, _results;
      if (data == null) {
        data = null;
      }
      event = {
        target: this,
        type: type,
        data: data
      };
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        if (listener.type === type) {
          _results.push(listener.callback(event));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return EventDispatcher;

  })();

  com.sizmek.model.BaseModel = (function(_super) {
    var Event, EventDispatcher;

    __extends(BaseModel, _super);

    EventDispatcher = com.sizmek.event.EventDispatcher;

    Event = com.sizmek.event.Event;

    BaseModel.prototype.data = {};

    function BaseModel() {
      this._checkCookies = __bind(this._checkCookies, this);
      this._checkQueries = __bind(this._checkQueries, this);
      this.pullData = __bind(this.pullData, this);
      this.getData = __bind(this.getData, this);
      this.setData = __bind(this.setData, this);
      BaseModel.__super__.constructor.call(this);
      this.pullData();
    }

    BaseModel.prototype.setData = function(key, value) {
      this.data[key] = value;
      return this.dispatchEvent(Event.MODEL_CHANGED, {
        key: key,
        value: value
      });
    };

    BaseModel.prototype.getData = function(key) {
      if (key === void 0) {
        return this.data;
      } else {
        return this.data[key];
      }
    };

    BaseModel.prototype.pullData = function() {};

    BaseModel.prototype._checkQueries = function() {
      var key, value, _results;
      _results = [];
      for (key in this.data) {
        value = getQuery(key);
        if (value === "true") {
          value = true;
        }
        if (value === "false") {
          value = false;
        }
        _results.push(this.data[key] = value != null ? value : this.data[key]);
      }
      return _results;
    };

    BaseModel.prototype._checkCookies = function() {
      var key, value, _results;
      _results = [];
      for (key in this.data) {
        value = getCookie(key);
        if (value === "true") {
          value = true;
        }
        if (value === "false") {
          value = false;
        }
        _results.push(this.data[key] = value != null ? value : this.data[key]);
      }
      return _results;
    };

    return BaseModel;

  })(com.sizmek.event.EventDispatcher);

  com.sizmek.model.AdHistoryModel = (function(_super) {
    var BaseModel;

    __extends(AdHistoryModel, _super);

    BaseModel = com.sizmek.model.BaseModel;

    AdHistoryModel.prototype.data = {
      "preroll-history": "",
      "midroll-history": "",
      "postroll-history": "",
      "overlay-history": ""
    };

    function AdHistoryModel() {
      this.pullData = __bind(this.pullData, this);
      this.reset = __bind(this.reset, this);
      this.setData = __bind(this.setData, this);
      AdHistoryModel.__super__.constructor.call(this);
    }

    AdHistoryModel.prototype.setData = function(key, value) {
      var current;
      current = this.data[key];
      if (current.length > 0) {
        value = "," + value;
      }
      value = current + value;
      setCookie(key, value);
      return AdHistoryModel.__super__.setData.call(this, key, value);
    };

    AdHistoryModel.prototype.reset = function() {
      var key, _i, _len, _ref, _results;
      _ref = this.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        setCookie(key, "");
        _results.push(this.data[key] = "");
      }
      return _results;
    };

    AdHistoryModel.prototype.pullData = function() {
      return this._checkCookies();
    };

    return AdHistoryModel;

  })(com.sizmek.model.BaseModel);

  com.sizmek.model.AdConfigModel = (function(_super) {
    var BaseModel;

    __extends(AdConfigModel, _super);

    BaseModel = com.sizmek.model.BaseModel;

    AdConfigModel.prototype.data = {
      "preroll": "../assets/defaults/html5-preroll-tag.xml",
      "midroll": "",
      "postroll": "",
      "overlay": ""
    };

    function AdConfigModel() {
      this.pullData = __bind(this.pullData, this);
      AdConfigModel.__super__.constructor.call(this);
    }

    AdConfigModel.prototype.pullData = function() {
      return this._checkQueries();
    };

    return AdConfigModel;

  })(com.sizmek.model.BaseModel);

  com.sizmek.model.MenuStateModel = (function(_super) {
    var BaseModel;

    __extends(MenuStateModel, _super);

    BaseModel = com.sizmek.model.BaseModel;

    MenuStateModel.prototype.data = {
      "ad-config-expanded": true,
      "player-config-expanded": false,
      "reporting-expanded": false,
      "ad-tag-expanded": false
    };

    function MenuStateModel() {
      this.reset = __bind(this.reset, this);
      this.pullData = __bind(this.pullData, this);
      this.setData = __bind(this.setData, this);
      MenuStateModel.__super__.constructor.call(this);
    }

    MenuStateModel.prototype.setData = function(key, value) {
      setCookie(key, value);
      return MenuStateModel.__super__.setData.call(this, key, value);
    };

    MenuStateModel.prototype.pullData = function() {
      return this._checkCookies();
    };

    MenuStateModel.prototype.reset = function() {
      var key, _results;
      _results = [];
      for (key in this.data) {
        _results.push(clearCookie(key));
      }
      return _results;
    };

    return MenuStateModel;

  })(com.sizmek.model.BaseModel);

  com.sizmek.model.PlayerConfigModel = (function(_super) {
    var BaseModel;

    __extends(PlayerConfigModel, _super);

    BaseModel = com.sizmek.model.BaseModel;

    PlayerConfigModel.prototype.data = {
      "player-type": "html5",
      "width": 640,
      "height": 360,
      "controls": "below",
      "auto-start": false,
      "script-access": "always",
      "wmode": "opaque"
    };

    function PlayerConfigModel() {
      this.pullData = __bind(this.pullData, this);
      PlayerConfigModel.__super__.constructor.call(this);
    }

    PlayerConfigModel.prototype.pullData = function() {
      return this._checkQueries();
    };

    return PlayerConfigModel;

  })(com.sizmek.model.BaseModel);

  com.sizmek.model.ModelCollection = (function() {
    var AdConfigModel, AdHistoryModel, MenuStateModel, PlayerConfigModel;

    AdConfigModel = com.sizmek.model.AdConfigModel;

    AdHistoryModel = com.sizmek.model.AdHistoryModel;

    MenuStateModel = com.sizmek.model.MenuStateModel;

    PlayerConfigModel = com.sizmek.model.PlayerConfigModel;

    function ModelCollection() {
      this.adConfigModel = new AdConfigModel();
      this.adHistoryModel = new AdHistoryModel();
      this.menuStateModel = new MenuStateModel();
      this.playerConfigModel = new PlayerConfigModel();
    }

    return ModelCollection;

  })();

  com.sizmek.view.CompanionView = (function() {
    function CompanionView() {
      this.render = __bind(this.render, this);
      this.node = document.getElementById("companion-container");
    }

    CompanionView.prototype.render = function(data) {
      var ad, node, _i, _len, _ref, _results;
      this.data = data;
      this.node.innerHTML = "";
      _ref = this.data.ads;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ad = _ref[_i];
        node = document.createElement("div");
        node.className = "ad";
        node.style.width = "" + ad.width + "px";
        node.style.height = "" + ad.height + "px";
        node.appendChild(ad.resource);
        _results.push(this.node.appendChild(node));
      }
      return _results;
    };

    return CompanionView;

  })();

  com.sizmek.view.PlayerView = (function(_super) {
    var Event, EventDispatcher;

    __extends(PlayerView, _super);

    EventDispatcher = com.sizmek.event.EventDispatcher;

    Event = com.sizmek.event.Event;

    function PlayerView() {
      this._onFrameLoaded = __bind(this._onFrameLoaded, this);
      this.render = __bind(this.render, this);
      PlayerView.__super__.constructor.call(this);
      this.container = document.getElementById("player");
      this.frame = document.getElementById("player-iframe");
    }

    PlayerView.prototype.render = function(data) {
      var height, width;
      width = data.config.width;
      height = data.config.height;
      document.body.style.minWidth = "" + width + "px";
      this.container.style.width = "" + width + "px";
      this.container.style.height = "" + height + "px";
      this.frame.scrolling = "no";
      this.frame.onload = this._onFrameLoaded;
      return this.frame.src = "instream-player.html?" + data.search;
    };

    PlayerView.prototype._onFrameLoaded = function() {
      return this.dispatchEvent(Event.PLAYER_LOADED);
    };

    return PlayerView;

  })(com.sizmek.event.EventDispatcher);

  com.sizmek.view.ResetBtnView = (function(_super) {
    var Event, EventDispatcher;

    __extends(ResetBtnView, _super);

    EventDispatcher = com.sizmek.event.EventDispatcher;

    Event = com.sizmek.event.Event;

    function ResetBtnView() {
      this._onMouseOut = __bind(this._onMouseOut, this);
      this._onMouseOver = __bind(this._onMouseOver, this);
      this._onNodeClicked = __bind(this._onNodeClicked, this);
      ResetBtnView.__super__.constructor.call(this);
      this.node = document.getElementById("reset-btn");
      this.node.onclick = this._onNodeClicked;
      this.node.onmouseover = this._onMouseOver;
      this.node.onmouseout = this._onMouseOut;
    }

    ResetBtnView.prototype._onNodeClicked = function() {
      this.node.className = "btn click";
      return this.dispatchEvent(Event.RESET_SELECTED);
    };

    ResetBtnView.prototype._onMouseOver = function() {
      return this.node.className = "btn over";
    };

    ResetBtnView.prototype._onMouseOut = function() {
      return this.node.className = "btn";
    };

    return ResetBtnView;

  })(com.sizmek.event.EventDispatcher);

  com.sizmek.view.ScaledUiView = (function() {
    function ScaledUiView() {
      this._onResize = __bind(this._onResize, this);
      window.onresize = this._onResize;
      this.node = document.createElement("div");
      this.node.id = "output";
      this._onResize();
    }

    ScaledUiView.prototype._onResize = function() {
      var width;
      width = document.body.offsetWidth;
      width = screen.width;
      return this.node.innerHTML = width;
    };

    return ScaledUiView;

  })();

  com.sizmek.view.SectionView = (function(_super) {
    var Event, EventDispatcher;

    __extends(SectionView, _super);

    EventDispatcher = com.sizmek.event.EventDispatcher;

    Event = com.sizmek.event.Event;

    function SectionView(id) {
      this.id = id;
      this._onTitleBarClicked = __bind(this._onTitleBarClicked, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.collapse = __bind(this.collapse, this);
      this.expand = __bind(this.expand, this);
      SectionView.__super__.constructor.call(this);
      this.node = document.getElementById(this.id);
      this.titleBarNode = this.node.getElementsByClassName("title-bar")[0];
      this.contentNode = this.node.getElementsByClassName("content")[0];
      this.expandBtnNode = this.node.getElementsByClassName("expand-btn")[0];
      this.titleBarNode.onclick = this._onTitleBarClicked;
    }

    SectionView.prototype.expand = function() {
      this.contentNode.style.display = "block";
      return this.expandBtnNode.innerHTML = "-";
    };

    SectionView.prototype.collapse = function() {
      this.contentNode.style.display = "none";
      return this.expandBtnNode.innerHTML = "+";
    };

    SectionView.prototype.show = function() {
      return this.node.style.display = "block";
    };

    SectionView.prototype.hide = function() {
      return this.node.style.display = "none";
    };

    SectionView.prototype._onTitleBarClicked = function() {
      return this.dispatchEvent(Event.TITLE_BAR_SELECTED);
    };

    return SectionView;

  })(com.sizmek.event.EventDispatcher);

  com.sizmek.view.ReportingView = (function(_super) {
    var SectionView;

    __extends(ReportingView, _super);

    SectionView = com.sizmek.view.SectionView;

    function ReportingView() {
      this.render = __bind(this.render, this);
      ReportingView.__super__.constructor.call(this, "reporting");
    }

    ReportingView.prototype.render = function(data) {
      var key, node, value, _results;
      _results = [];
      for (key in data) {
        value = data[key];
        node = document.getElementById("" + key + "-count");
        if (node) {
          _results.push(node != null ? node.innerHTML = value : void 0);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ReportingView;

  })(com.sizmek.view.SectionView);

  com.sizmek.view.PlayerConfigView = (function(_super) {
    var SectionView;

    __extends(PlayerConfigView, _super);

    SectionView = com.sizmek.view.SectionView;

    function PlayerConfigView() {
      this._configFlashViews = __bind(this._configFlashViews, this);
      this.render = __bind(this.render, this);
      PlayerConfigView.__super__.constructor.call(this, "player-config");
      this.typeNode = document.getElementById("player-type");
      this.widthNode = document.getElementById("player-width");
      this.heightNode = document.getElementById("player-height");
      this.controlsNode = document.getElementById("player-controls");
      this.autoStartNode = document.getElementById("player-auto-start");
      this.scriptAccessNode = document.getElementById("player-script-access");
      this.wmodeNode = document.getElementById("player-wmode");
      this.typeNode.onchange = this._configFlashViews;
    }

    PlayerConfigView.prototype.render = function(data) {
      var index;
      this.typeNode.selectedIndex = data["player-type"] === "as3" ? 0 : 1;
      this.widthNode.value = data["width"];
      this.heightNode.value = data["height"];
      this.controlsNode.selectedIndex = data["controls"] === "over" ? 0 : 1;
      this.autoStartNode.selectedIndex = data["auto-start"] ? 0 : 1;
      switch (data["script-access"]) {
        case "always":
          index = 0;
          break;
        case "same":
          index = 1;
          break;
        case "never":
          index = 2;
          break;
        default:
          index = 0;
      }
      this.scriptAccessNode.selectedIndex = index;
      switch (data["wmode"]) {
        case "opaque":
          index = 0;
          break;
        case "window":
          index = 1;
          break;
        case "trans":
          index = 2;
          break;
        default:
          index = 0;
      }
      this.wmodeNode.selectedIndex = index;
      return this._configFlashViews();
    };

    PlayerConfigView.prototype._configFlashViews = function() {
      var display, value;
      value = this.typeNode.options[this.typeNode.selectedIndex].value;
      display = value === "as3" ? "block" : "none";
      this.controlsNode.parentNode.style.display = display;
      this.autoStartNode.parentNode.style.display = display;
      this.scriptAccessNode.parentNode.style.display = display;
      return this.wmodeNode.parentNode.style.display = display;
    };

    return PlayerConfigView;

  })(com.sizmek.view.SectionView);

  com.sizmek.view.AdTagView = (function(_super) {
    var SectionView;

    __extends(AdTagView, _super);

    SectionView = com.sizmek.view.SectionView;

    function AdTagView() {
      this.render = __bind(this.render, this);
      AdTagView.__super__.constructor.call(this, "ad-tag");
      this.node = document.getElementById("ad-tag");
      this.outputNode = this.node.getElementsByClassName("raw-output")[0];
    }

    AdTagView.prototype.render = function(data) {
      data = vkbeautify.xml(data);
      data = data.replace(/\</g, "&lt;");
      data = data.replace(/\>/g, "&gt;");
      return this.outputNode.innerHTML = "<pre>" + data + "</pre>";
    };

    return AdTagView;

  })(com.sizmek.view.SectionView);

  com.sizmek.view.AdConfigView = (function(_super) {
    var SectionView;

    __extends(AdConfigView, _super);

    SectionView = com.sizmek.view.SectionView;

    function AdConfigView() {
      this.render = __bind(this.render, this);
      AdConfigView.__super__.constructor.call(this, "ad-config");
      this.preNode = document.getElementById("ad-pre");
      this.midNode = document.getElementById("ad-mid");
      this.postNode = document.getElementById("ad-post");
      this.overNode = document.getElementById("ad-over");
    }

    AdConfigView.prototype.render = function(data) {
      this.preNode.value = data.preroll;
      this.midNode.value = data.midroll;
      this.postNode.value = data.postroll;
      return this.overNode.value = data.overlay;
    };

    return AdConfigView;

  })(com.sizmek.view.SectionView);

  com.sizmek.view.SubmitBtnView = (function(_super) {
    var Event, EventDispatcher;

    __extends(SubmitBtnView, _super);

    Event = com.sizmek.event.Event;

    EventDispatcher = com.sizmek.event.EventDispatcher;

    function SubmitBtnView() {
      this._onKeyPress = __bind(this._onKeyPress, this);
      this._onMouseOut = __bind(this._onMouseOut, this);
      this._onMouseOver = __bind(this._onMouseOver, this);
      this._onNodeClicked = __bind(this._onNodeClicked, this);
      SubmitBtnView.__super__.constructor.call(this);
      this.node = document.getElementById("submit-btn");
      this.node.onclick = this._onNodeClicked;
      this.node.onmouseover = this._onMouseOver;
      this.node.onmouseout = this._onMouseOut;
      document.body.addEventListener("keypress", this._onKeyPress);
    }

    SubmitBtnView.prototype._onNodeClicked = function() {
      this.node.className = "btn click";
      return this.dispatchEvent(Event.SUBMIT_SELECTED);
    };

    SubmitBtnView.prototype._onMouseOver = function() {
      return this.node.className = "btn over";
    };

    SubmitBtnView.prototype._onMouseOut = function() {
      return this.node.className = "btn";
    };

    SubmitBtnView.prototype._onKeyPress = function(event) {
      var key;
      key = event.which || event.keyCode;
      if (key === 13) {
        return this._onNodeClicked();
      }
    };

    return SubmitBtnView;

  })(com.sizmek.event.EventDispatcher);

  com.sizmek.view.ViewCollection = (function() {
    var AdConfigView, AdTagView, CompanionView, PlayerConfigView, PlayerView, ReportingView, ResetBtnView, ScaledUiView, SubmitBtnView;

    AdConfigView = com.sizmek.view.AdConfigView;

    PlayerConfigView = com.sizmek.view.PlayerConfigView;

    ReportingView = com.sizmek.view.ReportingView;

    AdTagView = com.sizmek.view.AdTagView;

    ResetBtnView = com.sizmek.view.ResetBtnView;

    PlayerView = com.sizmek.view.PlayerView;

    SubmitBtnView = com.sizmek.view.SubmitBtnView;

    CompanionView = com.sizmek.view.CompanionView;

    ScaledUiView = com.sizmek.view.ScaledUiView;

    function ViewCollection() {
      this.adConfigView = new AdConfigView();
      this.playerConfigView = new PlayerConfigView();
      this.reportingView = new ReportingView();
      this.adTagView = new AdTagView();
      this.resetBtnView = new ResetBtnView();
      this.playerView = new PlayerView();
      this.submitBtnView = new SubmitBtnView();
      this.companionView = new CompanionView();
      this.scaledUiView = new ScaledUiView();
    }

    return ViewCollection;

  })();

  com.sizmek.QaInterface = (function() {
    var ControllerCollection, ModelCollection, ViewCollection;

    ModelCollection = com.sizmek.model.ModelCollection;

    ViewCollection = com.sizmek.view.ViewCollection;

    ControllerCollection = com.sizmek.controller.ControllerCollection;

    function QaInterface() {
      this.models = new ModelCollection();
      this.views = new ViewCollection();
      this.controllers = new ControllerCollection(this.models, this.views);
    }

    return QaInterface;

  })();

  Main = (function() {
    var QaInterface;

    QaInterface = com.sizmek.QaInterface;

    function Main() {
      this._onWindowLoaded = __bind(this._onWindowLoaded, this);
      window.onload = this._onWindowLoaded;
    }

    Main.prototype._onWindowLoaded = function() {
      return window.qaInterface = new QaInterface();
    };

    return Main;

  })();

  new Main();

}).call(this);
